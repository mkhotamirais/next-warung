generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

generator db_seed {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  phone         String?
  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // products Product[]
  Blogs Blog[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model BlogCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blogs     Blog[]
}

model Blog {
  id           String       @id @default(cuid())
  title        String
  slug         String       @unique
  content      String
  imageUrl     String // URL gambar blog
  BlogCategory BlogCategory @relation(fields: [categoryId], references: [id])
  categoryId   String
  User         User         @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// model Product {
//   id          String      @id @default(cuid())
//   name        String
//   slug        String      @unique
//   description String?
//   price       Float
//   stock       Int         @default(0)
//   imageUrl    String?
//   category    Category?   @relation(fields: [categoryId], references: [id])
//   categoryId  String?
//   tags        Tag[]       @relation("ProductTags", references: [id])
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt

//   CartItems   CartItem[]
// }

// model Category {
//   id       String    @id @default(cuid())
//   name     String    @unique
//   products Product[]
// }

// model Tag {
//   id       String    @id @default(cuid())
//   name     String    @unique
//   products Product[] @relation("ProductTags")
// }

// model Cart {
//   id        String      @id @default(cuid())
//   userId    String
//   items     CartItem[]
//   status    String      @default("open") // open, checkout, paid, canceled
//   createdAt DateTime    @default(now())
//   updatedAt DateTime    @updatedAt
// }

// model CartItem {
//   id        String    @id @default(cuid())
//   cart      Cart      @relation(fields: [cartId], references: [id])
//   cartId    String
//   product   Product   @relation(fields: [productId], references: [id])
//   productId String
//   quantity  Int
//   price     Float     // Harga saat ditambahkan ke keranjang (bisa berbeda dari produk asli)
// }
